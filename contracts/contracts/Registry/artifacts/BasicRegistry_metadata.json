{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "AddedContract",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "RemovedContract",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "addContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "getContract",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "getImplementation",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "getUpgrader",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "hasContract",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					}
				],
				"name": "removeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "name",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "newImplementation",
						"type": "address"
					}
				],
				"name": "upgradeContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"RemovedContract(string)": {
					"params": {
						"name": "the name of the removed contract"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"addContract(string,address)": {
					"params": {
						"contractAddress": "the address of the contract",
						"name": "the name to associate the contract with"
					}
				},
				"getContract(string)": {
					"params": {
						"name": "the name of the contract"
					},
					"returns": {
						"_0": "the address of the contract"
					}
				},
				"getImplementation(string)": {
					"params": {
						"name": "the name of the contract"
					},
					"returns": {
						"_0": "the implementation address"
					}
				},
				"getUpgrader(string)": {
					"returns": {
						"_0": "the proxy admin address"
					}
				},
				"hasContract(string)": {
					"params": {
						"name": "the name of the contract"
					},
					"returns": {
						"_0": "true if the contract is present in the registry"
					}
				},
				"removeContract(string)": {
					"params": {
						"name": "the associated name with the contract"
					}
				},
				"upgradeContract(string,address)": {
					"params": {
						"name": "the name of the proxy contract",
						"newImplementation": "the new implementation the proxy will be upgraded to  It is the Owner's responsibility to ensure the compatibility between implementations"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"RemovedContract(string)": {
					"notice": "REQUIRED The event that is emitted when the contract get removed from the registry"
				}
			},
			"kind": "user",
			"methods": {
				"addContract(string,address)": {
					"notice": "REQUIRED The function that adds pure (non-proxy) contracts to the ContractsRegistry. The contracts MAY either be  the ones the system does not have direct upgradeability control over or the ones that are not upgradeable by design"
				},
				"getContract(string)": {
					"notice": "REQUIRED The function that returns an associated contract by the name"
				},
				"getImplementation(string)": {
					"notice": "RECOMMENDED The function that returns an implementation of the given proxy contract"
				},
				"getUpgrader(string)": {
					"notice": "RECOMMENDED The function that returns the admin of the added proxy contracts"
				},
				"hasContract(string)": {
					"notice": "OPTIONAL The function that checks if a contract with a given name has been added"
				},
				"removeContract(string)": {
					"notice": "REQUIRED The function to remove contracts from the ContractsRegistry"
				},
				"upgradeContract(string,address)": {
					"notice": "REQUIRED The function that upgrades added proxy contract with a new implementation"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Registry/BasicRegistry.sol": "BasicRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/Registry/BasicRegistry.sol": {
			"keccak256": "0x1ea482fe021dda10a2205b135d5421b1ee32ab9d8ddcf34b7a6df913bba8e9c0",
			"urls": [
				"bzz-raw://ac78b8f64504894a6401ebf3c40ff4b930575d2d0764e766b378346fabf9704b",
				"dweb:/ipfs/QmTBbkHJrWPzkH1sCeFV6N99M3AJyiuu8kfzGYhfwyVaLx"
			]
		},
		"contracts/Registry/IContractRegistryMod.sol": {
			"keccak256": "0x193e7d6eaafa5b38c62b90232e74039e22504d1f05a03cb9cb67d7bbe4a2d2c9",
			"urls": [
				"bzz-raw://4d1c15e84f79902ab4d7c97740190c88c256de0e13e7e726f52a3d04928e0264",
				"dweb:/ipfs/QmVwbA1fLtY6LKThXXFTTdRVRCvqxSrgqLyjuh8qD6DXhP"
			]
		}
	},
	"version": 1
}